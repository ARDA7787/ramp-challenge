{"ast":null,"code":"var _jsxFileName = \"/Users/nikhildonde/Downloads/ramp-fe-challenge/src/components/InputSelect/index.tsx\",\n    _s = $RefreshSig$();\n\nimport Downshift from \"downshift\";\nimport { useCallback, useState, useEffect, useRef } from \"react\";\nimport classNames from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function InputSelect(_ref) {\n  _s();\n\n  let {\n    label,\n    defaultValue,\n    onChange: consumerOnChange,\n    items,\n    parseItem,\n    isLoading,\n    loadingLabel\n  } = _ref;\n  const [selectedValue, setSelectedValue] = useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : null);\n  const [dropdownPosition, setDropdownPosition] = useState({\n    top: 0,\n    left: 0\n  });\n  const [isOpen, setIsOpen] = useState(false);\n  const inputRef = useRef(null);\n  /** Central helper â€“ recompute the dropdownâ€™s fixed <top,left> */\n\n  const updateDropdownPosition = useCallback(() => {\n    if (inputRef.current) {\n      setDropdownPosition(getDropdownPosition(inputRef.current));\n    }\n  }, []);\n  /** Down-shift selection handler (unchanged) */\n\n  const onChange = useCallback(selectedItem => {\n    if (selectedItem === null) return;\n    consumerOnChange(selectedItem);\n    setSelectedValue(selectedItem);\n  }, [consumerOnChange]);\n  /**\n   * ðŸ‘‰ NEW: while the menu is open, keep the dropdown anchored\n   *        to its input by recomputing on every scroll.\n   */\n\n  useEffect(() => {\n    if (!isOpen) return; // Make sure weâ€™re in the right place as soon as it opens\n\n    updateDropdownPosition();\n\n    const handleScroll = () => updateDropdownPosition(); // `capture: true` lets us catch scrolls on nested containers, too.\n\n\n    window.addEventListener(\"scroll\", handleScroll, {\n      capture: true\n    });\n    return () => window.removeEventListener(\"scroll\", handleScroll, {\n      capture: true\n    });\n  }, [isOpen, updateDropdownPosition]);\n  return /*#__PURE__*/_jsxDEV(Downshift, {\n    id: \"RampSelect\",\n    onChange: onChange,\n    selectedItem: selectedValue,\n    itemToString: item => item ? parseItem(item).label : \"\",\n    onStateChange: _ref2 => {\n      let {\n        isOpen: newIsOpen\n      } = _ref2;\n      if (typeof newIsOpen === \"boolean\") setIsOpen(newIsOpen);\n    },\n    children: _ref3 => {\n      let {\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen: downshiftIsOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue\n      } = _ref3;\n      const toggleProps = getToggleButtonProps();\n      const parsedSelectedItem = selectedItem ? parseItem(selectedItem) : null;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampInputSelect--root\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"RampText--s RampText--hushed\",\n          ...getLabelProps(),\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampBreak--xs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: inputRef,\n          className: \"RampInputSelect--input\",\n          onClick: event => {\n            // Always recalc before toggling so the very first paint is correct\n            updateDropdownPosition();\n            toggleProps.onClick(event);\n          },\n          children: inputValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classNames(\"RampInputSelect--dropdown-container\", {\n            \"RampInputSelect--dropdown-container-opened\": downshiftIsOpen\n          }),\n          ...getMenuProps(),\n          style: {\n            top: dropdownPosition.top,\n            left: dropdownPosition.left\n          },\n          children: renderItems()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this); // ---------------------\n      //  RENDER HELPERS\n      // ---------------------\n\n      function renderItems() {\n        if (!downshiftIsOpen) return null;\n        if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampInputSelect--dropdown-item\",\n          children: [loadingLabel, \"\\u2026\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 33\n        }, this);\n        if (items.length === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampInputSelect--dropdown-item\",\n          children: \"No items\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 42\n        }, this);\n        return items.map((item, index) => {\n          const parsedItem = parseItem(item);\n          return /*#__PURE__*/_jsxDEV(\"div\", { ...getItemProps({\n              index,\n              item,\n              className: classNames(\"RampInputSelect--dropdown-item\", {\n                \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n                \"RampInputSelect--dropdown-item-selected\": (parsedSelectedItem === null || parsedSelectedItem === void 0 ? void 0 : parsedSelectedItem.value) === parsedItem.value\n              })\n            }),\n            children: parsedItem.label\n          }, parsedItem.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this);\n        });\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n/** Unchanged â€“ calculates absolute coords for a fixed dropdown */\n\n_s(InputSelect, \"0T2/Yzr+oSto1e4KKMl0fqb5CBw=\");\n\n_c = InputSelect;\n\nconst getDropdownPosition = target => {\n  if (target instanceof Element) {\n    const {\n      top,\n      left,\n      height\n    } = target.getBoundingClientRect();\n    return {\n      top: top + height,\n      // just below the input\n      left\n    };\n  }\n\n  return {\n    top: 0,\n    left: 0\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"InputSelect\");","map":{"version":3,"names":["Downshift","useCallback","useState","useEffect","useRef","classNames","InputSelect","label","defaultValue","onChange","consumerOnChange","items","parseItem","isLoading","loadingLabel","selectedValue","setSelectedValue","dropdownPosition","setDropdownPosition","top","left","isOpen","setIsOpen","inputRef","updateDropdownPosition","current","getDropdownPosition","selectedItem","handleScroll","window","addEventListener","capture","removeEventListener","item","newIsOpen","getItemProps","getLabelProps","getMenuProps","downshiftIsOpen","highlightedIndex","getToggleButtonProps","inputValue","toggleProps","parsedSelectedItem","event","onClick","renderItems","length","map","index","parsedItem","className","value","target","Element","height","getBoundingClientRect"],"sources":["/Users/nikhildonde/Downloads/ramp-fe-challenge/src/components/InputSelect/index.tsx"],"sourcesContent":["import Downshift from \"downshift\"\nimport { useCallback, useState, useEffect, useRef } from \"react\"\nimport classNames from \"classnames\"\nimport {\n  DropdownPosition,\n  GetDropdownPositionFn,\n  InputSelectOnChange,\n  InputSelectProps\n} from \"./types\"\n\nexport function InputSelect<TItem>({\n  label,\n  defaultValue,\n  onChange: consumerOnChange,\n  items,\n  parseItem,\n  isLoading,\n  loadingLabel\n}: InputSelectProps<TItem>) {\n  const [selectedValue, setSelectedValue] = useState<TItem | null>(defaultValue ?? null)\n  const [dropdownPosition, setDropdownPosition] = useState<DropdownPosition>({ top: 0, left: 0 })\n  const [isOpen, setIsOpen] = useState(false)\n\n  const inputRef = useRef<HTMLDivElement>(null)\n\n  /** Central helper â€“ recompute the dropdownâ€™s fixed <top,left> */\n  const updateDropdownPosition = useCallback(() => {\n    if (inputRef.current) {\n      setDropdownPosition(getDropdownPosition(inputRef.current))\n    }\n  }, [])\n\n  /** Down-shift selection handler (unchanged) */\n  const onChange = useCallback<InputSelectOnChange<TItem>>(\n    (selectedItem) => {\n      if (selectedItem === null) return\n      consumerOnChange(selectedItem)\n      setSelectedValue(selectedItem)\n    },\n    [consumerOnChange]\n  )\n\n  /**\n   * ðŸ‘‰ NEW: while the menu is open, keep the dropdown anchored\n   *        to its input by recomputing on every scroll.\n   */\n  useEffect(() => {\n    if (!isOpen) return\n\n    // Make sure weâ€™re in the right place as soon as it opens\n    updateDropdownPosition()\n\n    const handleScroll = () => updateDropdownPosition()\n    // `capture: true` lets us catch scrolls on nested containers, too.\n    window.addEventListener(\"scroll\", handleScroll, { capture: true })\n\n    return () => window.removeEventListener(\"scroll\", handleScroll, { capture: true })\n  }, [isOpen, updateDropdownPosition])\n\n  return (\n    <Downshift<TItem>\n      id=\"RampSelect\"\n      onChange={onChange}\n      selectedItem={selectedValue}\n      itemToString={(item) => (item ? parseItem(item).label : \"\")}\n      onStateChange={({ isOpen: newIsOpen }) => {\n        if (typeof newIsOpen === \"boolean\") setIsOpen(newIsOpen)\n      }}\n    >\n      {({\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen: downshiftIsOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue\n      }) => {\n        const toggleProps = getToggleButtonProps()\n        const parsedSelectedItem = selectedItem ? parseItem(selectedItem) : null\n\n        return (\n          <div className=\"RampInputSelect--root\">\n            <label className=\"RampText--s RampText--hushed\" {...getLabelProps()}>\n              {label}\n            </label>\n\n            <div className=\"RampBreak--xs\" />\n\n            <div\n              ref={inputRef}\n              className=\"RampInputSelect--input\"\n              onClick={(event) => {\n                // Always recalc before toggling so the very first paint is correct\n                updateDropdownPosition()\n                toggleProps.onClick(event)\n              }}\n            >\n              {inputValue}\n            </div>\n\n            <div\n              className={classNames(\"RampInputSelect--dropdown-container\", {\n                \"RampInputSelect--dropdown-container-opened\": downshiftIsOpen\n              })}\n              {...getMenuProps()}\n              style={{ top: dropdownPosition.top, left: dropdownPosition.left }}\n            >\n              {renderItems()}\n            </div>\n          </div>\n        )\n\n        // ---------------------\n        //  RENDER HELPERS\n        // ---------------------\n        function renderItems() {\n          if (!downshiftIsOpen) return null\n\n          if (isLoading) return <div className=\"RampInputSelect--dropdown-item\">{loadingLabel}â€¦</div>\n\n          if (items.length === 0) return <div className=\"RampInputSelect--dropdown-item\">No items</div>\n\n          return items.map((item, index) => {\n            const parsedItem = parseItem(item)\n            return (\n              <div\n                key={parsedItem.value}\n                {...getItemProps({\n                  index,\n                  item,\n                  className: classNames(\"RampInputSelect--dropdown-item\", {\n                    \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n                    \"RampInputSelect--dropdown-item-selected\":\n                      parsedSelectedItem?.value === parsedItem.value\n                  })\n                })}\n              >\n                {parsedItem.label}\n              </div>\n            )\n          })\n        }\n      }}\n    </Downshift>\n  )\n}\n\n/** Unchanged â€“ calculates absolute coords for a fixed dropdown */\nconst getDropdownPosition: GetDropdownPositionFn = (target) => {\n  if (target instanceof Element) {\n    const { top, left, height } = target.getBoundingClientRect()\n    return {\n      top: top + height, // just below the input\n      left\n    }\n  }\n  return { top: 0, left: 0 }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}