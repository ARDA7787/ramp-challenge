{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  /* Fetch next page (or the first page if none loaded yet) */\n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n    /* ────────────────\n       Merge logic fix\n    ──────────────── */\n\n    setPaginatedTransactions(previousResponse => {\n      if (response === null) {\n        // Failed to fetch – keep whatever we already had\n        return previousResponse;\n      }\n\n      if (previousResponse === null) {\n        // First page\n        return response;\n      } // Append new page’s data to the existing list\n\n\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  /* Clear cached data (e.g., when switching filters) */\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","response","page","nextPage","previousResponse","data","invalidateData"],"sources":["/Users/nikhildonde/Downloads/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<\n    PaginatedResponse<Transaction[]> | null\n  >(null)\n\n  /* Fetch next page (or the first page if none loaded yet) */\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache<\n      PaginatedResponse<Transaction[]>,\n      PaginatedRequestParams\n    >(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n    })\n\n    /* ────────────────\n       Merge logic fix\n    ──────────────── */\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null) {\n        // Failed to fetch – keep whatever we already had\n        return previousResponse\n      }\n\n      if (previousResponse === null) {\n        // First page\n        return response\n      }\n\n      // Append new page’s data to the existing list\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage,\n      }\n    })\n  }, [fetchWithCache, paginatedTransactions])\n\n  /* Clear cached data (e.g., when switching filters) */\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAEhE,IAFgE,CAAlE;EAIA;;EACA,MAAMO,QAAQ,GAAGR,WAAW,CAAC,YAAY;IACvC,MAAMS,QAAQ,GAAG,MAAML,cAAc,CAGnC,uBAHmC,EAGV;MACzBM,IAAI,EAAEJ,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACK;IADxC,CAHU,CAArC;IAOA;AACJ;AACA;;IACIJ,wBAAwB,CAAEK,gBAAD,IAAsB;MAC7C,IAAIH,QAAQ,KAAK,IAAjB,EAAuB;QACrB;QACA,OAAOG,gBAAP;MACD;;MAED,IAAIA,gBAAgB,KAAK,IAAzB,EAA+B;QAC7B;QACA,OAAOH,QAAP;MACD,CAT4C,CAW7C;;;MACA,OAAO;QACLI,IAAI,EAAE,CAAC,GAAGD,gBAAgB,CAACC,IAArB,EAA2B,GAAGJ,QAAQ,CAACI,IAAvC,CADD;QAELF,QAAQ,EAAEF,QAAQ,CAACE;MAFd,CAAP;IAID,CAhBuB,CAAxB;EAiBD,CA5B2B,EA4BzB,CAACP,cAAD,EAAiBE,qBAAjB,CA5ByB,CAA5B;EA8BA;;EACA,MAAMQ,cAAc,GAAGd,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEM,IAAI,EAAEP,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDM;EAAlD,CAAP;AACD;;GA3CeX,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}