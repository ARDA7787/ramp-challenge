{"ast":null,"code":"var _jsxFileName = \"/Users/nikhildonde/Downloads/ramp-fe-challenge/src/components/InputSelect/index.tsx\",\n    _s = $RefreshSig$();\n\nimport Downshift from \"downshift\";\nimport { useCallback, useState, useEffect, useRef } from \"react\";\nimport classNames from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function InputSelect(_ref) {\n  _s();\n\n  let {\n    label,\n    defaultValue,\n    onChange: consumerOnChange,\n    items,\n    parseItem,\n    isLoading,\n    loadingLabel\n  } = _ref;\n  const [selectedValue, setSelectedValue] = useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : null);\n  const [dropdownPosition, setDropdownPosition] = useState({\n    top: 0,\n    left: 0\n  });\n  const [isOpen, setIsOpen] = useState(false); // Reference to the input element for position recalculation\n\n  const inputRef = useRef(null);\n  const onChange = useCallback(selectedItem => {\n    if (selectedItem === null) {\n      return;\n    }\n\n    consumerOnChange(selectedItem);\n    setSelectedValue(selectedItem);\n  }, [consumerOnChange]); // Function to update dropdown position\n\n  const updateDropdownPosition = useCallback(() => {\n    if (inputRef.current) {\n      setDropdownPosition(getDropdownPosition(inputRef.current));\n    }\n  }, []); // Effect to handle scroll events when dropdown is open\n\n  useEffect(() => {\n    if (isOpen) {\n      // Add scroll event listener\n      const handleScroll = () => {\n        updateDropdownPosition();\n      };\n\n      window.addEventListener('scroll', handleScroll, true); // Cleanup function\n\n      return () => {\n        window.removeEventListener('scroll', handleScroll, true);\n      };\n    }\n  }, [isOpen]);\n  return /*#__PURE__*/_jsxDEV(Downshift, {\n    id: \"RampSelect\",\n    onChange: onChange,\n    selectedItem: selectedValue,\n    itemToString: item => item ? parseItem(item).label : \"\",\n    onStateChange: _ref2 => {\n      let {\n        isOpen: newIsOpen\n      } = _ref2;\n\n      if (typeof newIsOpen === 'boolean') {\n        setIsOpen(newIsOpen);\n      }\n    },\n    children: _ref3 => {\n      let {\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen: downshiftIsOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue\n      } = _ref3;\n      const toggleProps = getToggleButtonProps();\n      const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampInputSelect--root\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"RampText--s RampText--hushed\",\n          ...getLabelProps(),\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampBreak--xs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: inputRef,\n          className: \"RampInputSelect--input\",\n          onClick: event => {\n            setDropdownPosition(getDropdownPosition(event.target));\n            toggleProps.onClick(event);\n          },\n          children: inputValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classNames(\"RampInputSelect--dropdown-container\", {\n            \"RampInputSelect--dropdown-container-opened\": downshiftIsOpen\n          }),\n          ...getMenuProps(),\n          style: {\n            top: dropdownPosition.top,\n            left: dropdownPosition.left\n          },\n          children: renderItems()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this);\n\n      function renderItems() {\n        if (!downshiftIsOpen) {\n          return null;\n        }\n\n        if (isLoading) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"RampInputSelect--dropdown-item\",\n            children: [loadingLabel, \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 20\n          }, this);\n        }\n\n        if (items.length === 0) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"RampInputSelect--dropdown-item\",\n            children: \"No items\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 20\n          }, this);\n        }\n\n        return items.map((item, index) => {\n          const parsedItem = parseItem(item);\n          return /*#__PURE__*/_jsxDEV(\"div\", { ...getItemProps({\n              key: parsedItem.value,\n              index,\n              item,\n              className: classNames(\"RampInputSelect--dropdown-item\", {\n                \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n                \"RampInputSelect--dropdown-item-selected\": (parsedSelectedItem === null || parsedSelectedItem === void 0 ? void 0 : parsedSelectedItem.value) === parsedItem.value\n              })\n            }),\n            children: parsedItem.label\n          }, parsedItem.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this);\n        });\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InputSelect, \"aAi+bWWsiyABhk62MMn7A9lDz4w=\");\n\n_c = InputSelect;\n\nconst getDropdownPosition = target => {\n  if (target instanceof Element) {\n    const {\n      top,\n      left\n    } = target.getBoundingClientRect();\n    const {\n      scrollY\n    } = window;\n    return {\n      top: scrollY + top + 63,\n      left\n    };\n  }\n\n  return {\n    top: 0,\n    left: 0\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"InputSelect\");","map":{"version":3,"names":["Downshift","useCallback","useState","useEffect","useRef","classNames","InputSelect","label","defaultValue","onChange","consumerOnChange","items","parseItem","isLoading","loadingLabel","selectedValue","setSelectedValue","dropdownPosition","setDropdownPosition","top","left","isOpen","setIsOpen","inputRef","selectedItem","updateDropdownPosition","current","getDropdownPosition","handleScroll","window","addEventListener","removeEventListener","item","newIsOpen","getItemProps","getLabelProps","getMenuProps","downshiftIsOpen","highlightedIndex","getToggleButtonProps","inputValue","toggleProps","parsedSelectedItem","event","target","onClick","renderItems","length","map","index","parsedItem","key","value","className","Element","getBoundingClientRect","scrollY"],"sources":["/Users/nikhildonde/Downloads/ramp-fe-challenge/src/components/InputSelect/index.tsx"],"sourcesContent":["import Downshift from \"downshift\"\nimport { useCallback, useState, useEffect, useRef } from \"react\"\nimport classNames from \"classnames\"\nimport { DropdownPosition, GetDropdownPositionFn, InputSelectOnChange, InputSelectProps } from \"./types\"\n\nexport function InputSelect<TItem>({\n  label,\n  defaultValue,\n  onChange: consumerOnChange,\n  items,\n  parseItem,\n  isLoading,\n  loadingLabel,\n}: InputSelectProps<TItem>) {\n  const [selectedValue, setSelectedValue] = useState<TItem | null>(defaultValue ?? null)\n  const [dropdownPosition, setDropdownPosition] = useState<DropdownPosition>({\n    top: 0,\n    left: 0,\n  })\n  const [isOpen, setIsOpen] = useState(false)\n  \n  // Reference to the input element for position recalculation\n  const inputRef = useRef<HTMLDivElement>(null)\n\n  const onChange = useCallback<InputSelectOnChange<TItem>>(\n    (selectedItem) => {\n      if (selectedItem === null) {\n        return\n      }\n\n      consumerOnChange(selectedItem)\n      setSelectedValue(selectedItem)\n    },\n    [consumerOnChange]\n  )\n\n  // Function to update dropdown position\n  const updateDropdownPosition = useCallback(() => {\n    if (inputRef.current) {\n      setDropdownPosition(getDropdownPosition(inputRef.current))\n    }\n  }, [])\n\n  // Effect to handle scroll events when dropdown is open\n  useEffect(() => {\n    if (isOpen) {\n      // Add scroll event listener\n      const handleScroll = () => {\n        updateDropdownPosition()\n      }\n      \n      window.addEventListener('scroll', handleScroll, true)\n      \n      // Cleanup function\n      return () => {\n        window.removeEventListener('scroll', handleScroll, true)\n      }\n    }\n  }, [isOpen])\n\n  return (\n    <Downshift<TItem>\n      id=\"RampSelect\"\n      onChange={onChange}\n      selectedItem={selectedValue}\n      itemToString={(item) => (item ? parseItem(item).label : \"\")}\n      onStateChange={({ isOpen: newIsOpen }) => {\n        if (typeof newIsOpen === 'boolean') {\n          setIsOpen(newIsOpen)\n        }\n      }}\n    >\n      {({\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen: downshiftIsOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue,\n      }) => {\n        const toggleProps = getToggleButtonProps()\n        const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem)\n\n        return (\n          <div className=\"RampInputSelect--root\">\n            <label className=\"RampText--s RampText--hushed\" {...getLabelProps()}>\n              {label}\n            </label>\n            <div className=\"RampBreak--xs\" />\n            <div\n              ref={inputRef}\n              className=\"RampInputSelect--input\"\n              onClick={(event) => {\n                setDropdownPosition(getDropdownPosition(event.target))\n                toggleProps.onClick(event)\n              }}\n            >\n              {inputValue}\n            </div>\n\n            <div\n              className={classNames(\"RampInputSelect--dropdown-container\", {\n                \"RampInputSelect--dropdown-container-opened\": downshiftIsOpen,\n              })}\n              {...getMenuProps()}\n              style={{ top: dropdownPosition.top, left: dropdownPosition.left }}\n            >\n              {renderItems()}\n            </div>\n          </div>\n        )\n\n        function renderItems() {\n          if (!downshiftIsOpen) {\n            return null\n          }\n\n          if (isLoading) {\n            return <div className=\"RampInputSelect--dropdown-item\">{loadingLabel}...</div>\n          }\n\n          if (items.length === 0) {\n            return <div className=\"RampInputSelect--dropdown-item\">No items</div>\n          }\n\n          return items.map((item, index) => {\n            const parsedItem = parseItem(item)\n            return (\n              <div\n                key={parsedItem.value}\n                {...getItemProps({\n                  key: parsedItem.value,\n                  index,\n                  item,\n                  className: classNames(\"RampInputSelect--dropdown-item\", {\n                    \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n                    \"RampInputSelect--dropdown-item-selected\":\n                      parsedSelectedItem?.value === parsedItem.value,\n                  }),\n                })}\n              >\n                {parsedItem.label}\n              </div>\n            )\n          })\n        }\n      }}\n    </Downshift>\n  )\n}\n\nconst getDropdownPosition: GetDropdownPositionFn = (target) => {\n  if (target instanceof Element) {\n    const { top, left } = target.getBoundingClientRect()\n    const { scrollY } = window\n    return {\n      top: scrollY + top + 63,\n      left,\n    }\n  }\n\n  return { top: 0, left: 0 }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}